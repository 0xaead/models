@startuml
' https://plantuml.com/en/class-diagram
' https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html
' https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html#class

' Compound Protocol / Token Contracts
' self-contained borrowing and lending contracts
' https://github.com/compound-finance/compound-protocol/tree/v2.8.1/contracts

skinparam {
  'DefaultFontName Consolas
}

class CTokenStorage <<storage>> {
  - _notEntered : bool
  .. ERC20 ..
  + name : string
  + symbol : string
  + decimals : uint8
  ..
  - borrowRateMaxMantissa : uint
  - reserveFactorMaxMantissa : uint
  ..
  + admin : address
  + pendingAdmin : address
  ..
  - initialExchangeRateMantissa : uint
  + reserveFactorMantissa : uint
  + accrualBlockNumber : uint
  + borrowIndex : uint
  + totalBorrows : uint
  + totalReserves : uint
  + totalSupply : uint
  ..
  - mapping(address => uint) accountTokens
  - mapping(address => mapping (address => uint)) transferAllowances
}

class BorrowSnapshot <<struct>> {
  principal : uint
  interestIndex : uint
}

BorrowSnapshot "accountBorrows" --left--* CTokenStorage


interface ComptrollerInterface {
  + isComptroller : bool <<constant>>
  --
  + enterMarkets(address[] cTokens)
  + exitMarket(address cToken)
  .. policy hooks ..
  + mintAllowed(address cToken, address minter, uint mintAmount)
  + mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens)
  + ...
}

interface InterestRateModel {
  + isInterestRateModel : bool <<constant>>
  __
  + getBorrowRate(uint cash, uint borrows, uint reserves) <<view>>
  + getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) <<view>>
}


class CErc20Storage{
  + underlying : address
}


together {
  class ComptrollerInterface
  class InterestRateModel
}

CTokenStorage *-left- "comptroller" ComptrollerInterface
CTokenStorage *-left- InterestRateModel



abstract class CTokenInterface extends CTokenStorage{
  + isCToken : bool
  __
  event AccrueInterest()
  event Mint()
  event Redeem()
  event Borrow()
  event RepayBorrow()
  event LiquidateBorrow()
  ..
  event NewPendingAdmin()
  event NewAdmin()
  ..
  event NewComptroller()
  event NewMarketInterestRateModel()
  event NewReserveFactor()
  event ReservesAdded()
  event ReservesReduced()
  event Transfer()
  event Approval()
  event Failure()
  __
  + {abstract} transfer(address dst, uint amt)
  + {abstract} transferFrom(address src, address dst, uint amt)
  + {abstract} approve(address spender, uint amt)
  + {abstract} allowance(address owner, address spender)
  + {abstract} balanceOf(address owner)
  + {abstract} balanceOfUnderlying(address owner)
  + {abstract} getAccountSnapshot(address account)
  + {abstract} borrowRatePerBlock()
  + {abstract} supplyRatePerBlock()
  + {abstract} totalBorrowsCurrent()
  + {abstract} borrowBalanceCurrent(address account)
  + {abstract} borrowBalanceStored(address account)
  + {abstract} exchangeRateCurrent()
  + {abstract} exchangeRateStored()
  + {abstract} getCash()
  + {abstract} accrueInterest()
  + {abstract} seize(address liquidator, address borrower, uint seizeTokens)
  .. admin ..
  + {abstract} _setPendingAdmin(address newPendingAdmin)
  + {abstract} _acceptAdmin()
  + {abstract} _setComptroller(ComptrollerInterface newComptroller)
  + {abstract} _setReserveFactor(uint newReserveFactorMantissa)
  + {abstract} _reduceReserves(uint reduceAmt)
  + {abstract} _setInterestRateModel(InterestRateModel newInterestRateModel)
}



abstract class CErc20Interface extends CErc20Storage{

  + {abstract} mint(uint mintAmt)
  + {abstract} redeem(uint redeemTokens)
  + {abstract} redeemUnderlying(uint redeemAmt)
  + {abstract} borrow(uint borrowAmt)
  + {abstract} repayBorrow(uint repayAmt)
  + {abstract} repayBorrowBehalf(address borrower, uint repayAmt)
  + {abstract} liquidateBorrow(address borrower, uint repayAmt, CTokenInterface cTokenCollateral)
  .. admin ..
  + {abstract} _addReserves(uint addAmt)

}

class CDelegationStorage{
  + implementation : address
}

abstract class CDelegatorInterface extends CDelegationStorage{

  + event NewImplementation(address oldImpl, address newImpl)
  __
  + {abstract} _setImplementation(address impl, bool allowResign, bytes becomeImplData)

}

abstract class CDelegateInterface extends CDelegationStorage{

  + {abstract} _becomeImplementation(bytes data)
  + {abstract} _resignImplementation()
}


' https://github.com/compound-finance/compound-protocol/blob/v2.8.1/contracts/CToken.sol
abstract class CToken extends CTokenInterface{

  '+ initialize(ComptrollerInterface comptroller_, InterestRateModel interestRateModel_, uint initialExchangeRateMantissa_, string name_, string symbol_, uint8 decimals_)
  + initialize(...)
  - transferTokens(address spender, address src, address dst, uint tokens)
  + transfer(address dst, uint256 amt)
  + transferFrom(address src, address dst, uint256 amt)
  + approve(address spender, uint256 amt)
  + allowance(address owner, address spender) <<view>>
  + balanceOf(address owner) <<view>>
  + balanceOfUnderlying(address owner) <<view>>
  + getAccountSnapshot(address account) <<view>>
  - getBlockNumber() <<view>>
  + borrowRatePerBlock() <<view>>
  + supplyRatePerBlock() <<view>>
  + exchangeRateCurrent()
  + exchangeRateStored() <<view>>
  - exchangeRateStoredInternal() <<view>>
  + getCash() <<view>>
  + accrueInterest()
  - mintInternal(uint mintAmt) <<guarded>>
  - mintFresh(address minter, uint mintAmt)
  - redeemInternal(uint redeemTokens) <<guarded>>
  - redeemUnderlyingInternal(uint redeemAmt) <<guarded>>
  - redeemFresh(address redeemer, uint redeemTokensIn, uint redeemAmtIn)
  - borrowInternal(uint borrowAmt) <<guarded>>
  - borrowFresh(address borrower, uint borrowAmt)
  - repayBorrowInternal(uint repayAmt) <<guarded>>
  - repayBorrowBehalfInternal(address borrower, uint repayAmt) <<guarded>>
  - repayBorrowFresh(address payer, address borrower, uint repayAmt)
  - liquidateBorrowInternal(address borrower, uint repayAmt, CTokenInterface cTokenCollateral) <<guarded>>
  - liquidateBorrowFresh(address liquidator, address borrower, uint repayAmt, CTokenInterface cTokenCollateral)
  + seize(address liquidator, address borrower, uint seizeTokens) <<guarded>>
  - seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens)
  ..
  + _setPendingAdmin(address payable newPendingAdmin)
  + _acceptAdmin()
  + _setComptroller(ComptrollerInterface newComptroller)
  + _setReserveFactor(uint newReserveFactorMantissa) <<guarded>>
  - _setReserveFactorFresh(uint newReserveFactorMantissa)
  - _addReservesInternal(uint addAmt) <<guarded>>
  - _addReservesFresh(uint addAmt)
  - _reduceReserves(uint reduceAmt) <<guarded>>
  - _reduceReservesFresh(uint reduceAmt)
  + _setInterestRateModel(InterestRateModel newInterestRateModel)
  - _setInterestRateModelFresh(InterestRateModel newInterestRateModel)
  ..
  - {abstract} getCashPrior()
  - {abstract} doTransferIn(address from, uint amt)
  - {abstract} doTransferOut(address payable to, uint amt)
  ..
  - nonReentrant() <<modifier>>

}


class MintLocalVars <<struct>>{
  err : Error
  mathErr : MathError
  ..
  exchangeRateMantissa : uint
  mintTokens : uint
  totalSupplyNew : uint
  accountTokensNew : uint
  actualMintAmount : uint
}

class RedeemLocalVars <<struct>>{
  err : Error
  mathErr : MathError
  ..
  exchangeRateMantissa : uint
  redeemTokens : uint
  redeemAmount : uint
  totalSupplyNew : uint
  accountTokensNew : uint
}


class BorrowLocalVars <<struct>>{
  mathErr : MathError
  ..
  accountBorrows : uint
  accountBorrowsNew : uint
  totalBorrowsNew : uint
}

class RepayBorrowLocalVars <<struct>>{
  err : Error
  mathErr : MathError
  ..
  repayAmount : uint
  borrowerIndex : uint
  accountBorrows : uint
  accountBorrowsNew : uint
  totalBorrowsNew : uint
  actualRepayAmount : uint
}


together {
  class MintLocalVars
  class RedeemLocalVars
  class BorrowLocalVars
  class RepayBorrowLocalVars
}

CToken +-left- MintLocalVars
CToken +-left- RedeemLocalVars
CToken +-left- BorrowLocalVars
CToken +-left- RepayBorrowLocalVars

' https://github.com/compound-finance/compound-protocol/blob/v2.8.1/contracts/CEther.sol
class CEther extends CToken{
  '+ constructor(ComptrollerInterface comptroller_, InterestRateModel interestRateModel_, uint initExchangeRateMantissa_, string name_, string symbol_, uint8 decimals_, address admin_)
  + constructor(...)
  + mint()
  + redeem(uint redeemTokens)
  + redeemUnderlying(uint redeemAmt)
  + borrow(uint borrowAmt)
  + repayBorrow()
  + repayBorrowBehalf(address borrower)
  + liquidateBorrow(address borrower, CToken cTokenCollateral)
  + () <<fallback>>
  - getCashPrior()
  - doTransferIn(address from, uint amt)
  - doTransferOut(address payable to, uint amt)
  - requireNoError(uint errCode, string message)
}


' https://github.com/compound-finance/compound-protocol/blob/v2.8.1/contracts/CErc20.sol
class CErc20 extends CToken, CErc20Interface {


}

@enduml