@startuml
 
' Python 3 Collections
' https://github.com/python/cpython/blob/v3.8.5/Lib/_collections_abc.py
 
' https://plantuml.com/class-diagram
' https://plantuml.com/sequence-diagram
' https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html
' https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html#class
 
skinparam {
  DefaultFontName Monaco
  'DefaultFontName Consolas
  'DefaultMonospacedFontName Consolas
  DefaultFontSize 14
  DefaultFontStyle bold
  BackgroundColor transparent
  BoxPadding 300
  PageMargin 10
  ArrowThickness 2
  MinClassWidth 75
  ClassFontStyle bold
  ParticipantPadding 20
}

skinparam Sequence{
  DividerBorderThickness 2
  LifeLineBorderThickness 2
  ParticipantBorderThicknessa 2
  ReferenceBorderThickness 2
}

skinparam Group{
  BorderThickness 1
  BorderShadowing false
}
 
hide Circle
hide Footbox
caption Distribute Rewards

Actor "Admin" as admin 
Participant "ProjectManager" as pm <<contract>>
Participant "Project" as prj <<contract>>
Participant "RegularERC20TokenL" as tkn <<contract>>

admin -> pm ++ : distributeRewards()
admin ++
  pm -> pm ++ : hasRole(DEFAULT_ADMIN_ROLE)
  pm --
  pm -> prj ++ : setRewarded()
  note right : reverts, if already rewarded
  pm <-- prj --
  pm -> pm ++ : _simulateRewards()
  pm --
  loop votees.length
    pm -> tkn ++ : mint(_votee, _reward)
    pm <-- tkn --
    pm -->>] : emit VoteeRewarded
  end
  loop voters.length
    pm -> tkn ++ : mint(_voter, _reward)
    pm <-- tkn --
    pm -->>] : emit VoterRewarded
  end
  pm -> tkn ++ : mint(pm, _remainder)
  pm <-- tkn --
pm --> admin --

...
    
@enduml