@startuml

' CryptoPunksMarket contract class model
' https://github.com/larvalabs/cryptopunks/blob/master/contracts/CryptoPunksMarket.sol 

' https://plantuml.com/class-diagram
' https://plantuml.com/sequence-diagram
' https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html
' https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html#class
' https://plantuml.com/creole
' https://www.w3schools.com/colors/colors_names.asp

skinparam {
  DefaultFontName Monaco
  'DefaultFontName Consolas
  'DefaultFontName Lucida Console
  'DefaultMonospacedFontName Consolas
  'DefaultFontStyle bold

  BackgroundColor transparent  
  PageMargin 10
  BoxPadding 100
  ParticipantPadding 20

  ArrowFontSize 16
  ArrowThickness 1
  MinClassWidth 75
  ClassFontStyle bold
  
  NoteBackgroundColor SeaShell
  NoteBorderColor transparent
  NoteShadowing false
}

skinparam Sequence{
  DividerBorderThickness 1.5
  ReferenceBorderThickness 1.5
  MessageAlignment right

  ArrowColor DarkSlateGray
  ArrowThickness 1.3
  LifeLineBorderColor DarkSlateGray
  LifeLineBorderThickness 1.3

  ActorBorderColor DarkSlateGray
  ActorBackgroundColor GhostWhite
  ParticipantBorderColor DarkSlateGray
  ParticipantBorderThickness 1.5
  ParticipantBackgroundColor GhostWhite

  BoxBackgroundColor transparent
  BoxBorderColor transparent
  
  GroupBorderThickness 1.3
  GroupBorderColor Indigo
  GroupBodyBackgroundColor LavenderBlush
}

skinparam Group{
  BorderThickness 1.3
  BorderShadowing true
}

hide Circle
hide Footbox
caption ""[[https://github.com/larvalabs/cryptopunks/blob/master/contracts/CryptoPunksMarket.sol CryptoPunksMarket]]"" contract

class CryptoPunksMarket <<contract>> {
  - owner : address
  + totalSupply : uint256
  + nextPunkIndexToAssign : uint
  + punkIndexToAddress : mapping(uint256 => address)
  + balanceOf : mapping(address => uint256)
  + punksOfferedForSale : mapping(uint => Offer)
  + punkBids :  mapping(uint => Bid)
  + pendingWithdrawals : mapping (address => uint)
  ..
  + setInitialOwner(to, punkIndex)
  + setInitialOwners(addresses, indices)
  + getPunk(punkIndex)
  + transferPunk(to, punkIndex)
  + offerPunkForSale(punkIndex, minSalePriceInWei)
  + offerPunkForSaleToAddress(punkIndex, minSalePriceInWei, toAddress)
  + <<payable>> buyPunk(punkIndex)
  + withdraw()
  + <<payable>> enterBidForPunk(punkIndex)
  + acceptBidForPunk(punkIndex, uint minPrice)
  + withdrawBidForPunk(punkIndex)
  
}

class Offer <<struct>> {
  isForSale : bool
  punkIndex : uint
  seller : address
  minValue : uint
  onlySellTo : address
}

Offer --right--* CryptoPunksMarket
  
class Bid <<struct>> {
  hasBid : bool
  punkIndex : uint
  bidder : address
  uint : value
}

Bid --right--* CryptoPunksMarket


@enduml


